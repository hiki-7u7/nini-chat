// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}

model Profile {
  id String @id @default(uuid())
  userId String @unique
  name String
  imageUrl String @db.Text
  email String @db.Text
  friendRequestID String @db.Text
  isOnline Boolean @default(false)

  groups Group[]
  members Member[]

  sentRequests FriendRequest[] @relation("Sender")
  receivedRequests  FriendRequest[] @relation("Receiver")

  conversationsInitiated Conversation[] @relation("ProfileOne")
  conversationsReceived Conversation[] @relation("ProfileTwo")

  directMessages DirectMessage[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Group {
  id String @id @default(uuid())
  name String
  imageUrl String @db.Text
  description String @db.Text
  inviteCode String @unique

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members Member[]
  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  GUEST
}

model Member {
  id String @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([groupId])
  @@index([profileId])
}

model Message {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  memberId String
  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  groupId String
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([groupId])
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model FriendRequest {
  id String @id @default(uuid())
  status FriendRequestStatus @default(PENDING)

  senderId String
  sender Profile @relation("Sender",fields: [senderId], references: [id], onDelete: Cascade)

  receiverId String
  receiver Profile @relation("Receiver",fields: [receiverId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@index([senderId])
  @@index([receiverId])
}

model Conversation {
  id String @id @default(uuid())
  
  profileOneId String
  profileOne Profile @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)

  profileTwoId String
  profileTwo Profile @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  createdAt DateTime @default(now())

  @@index([profileTwoId])
  @@index([profileOneId])
}

model DirectMessage {
  id String @id @default(uuid())
  content String @db.Text
  fileUrl String? @db.Text
  deleted Boolean @default(false)

  profileId String
  profile Profile @relation(fields: [profileId], references: [id])
  
  conversationId String
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([conversationId])
}